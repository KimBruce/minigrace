In order to type-check against types declared in imported modules, the GCT
file for a compiled module contains information about the types in that module.
The idea is to have just enough information in the GCT to allow for the types
to be parsed and rebuilt completely as ObjectTypes by the static-types dialect.

The GCT contains this type information with a list of all types declared in the
module, and for each type a list of the type's methodtype signatures and the
tree of operations defining it. The list of types in collectionsPrelude.gct
looks like this:

    types:
     Binding
     Block0
     Block1
     Block2
     Collection
     CollectionFactory
     Dictionary
     EmptyCollectionFactory
     Enumerable
     Iterator
     List
     SelfType
     Sequence
     Set

Note that any generic parameters are left off in this type list. The list of
methodtypes for Binding looks like this:

    methodtypes-of:Binding<K, T>:
     7 == -> Boolean
     7 hash -> Number
     7 key -> K
     7 value -> T

Note that the generic parameters are included here. Also note that there are no
extra lines after the list of methodtypes, as Binding<K, T> is simply a type
literal. The only part of the list of methodtypes that is not self-explanatory
is the prefix on each line. The prefix is always a number, and that number means
that that methodtype is listed within a type literal, and all other lines which
are prefixed with the same number come from the same type literal. This is
useful in cases like the following, where a type is composed of two type
literals &ed together:

    methodtypes-of:Z:
     3 m4(x : Y) -> Y
     4 m5(x : Z) -> Z
     &
     3
     4

In this example we see the extra lines that appear after the list of methodtypes
in cases where the type is not a simple type literal. The last three lines in
this example represent the preorder traversal of the operation "3 & 4" which
defines this type. This means that type Z is the & type of two type literals,
represented by 3 and 4. One type literal has only the method m4, and the other
has only the method m5. The actual values of these numbers are not significant;
it only matters that lines with different number prefixes are from different
type literals.

Finally, note how & types and variant types are represented. An
entry to the GCT that looks like this:

    methodtypes-of:D:
     &
     &
     Collection<T>
     F
     G

...means that type D is the & type of three types: Collection<T> & F & G. It is
useful to notice that without parentheses, & types are left-associative --
A & B & C is read as ((A & B) & C). An entry to the GCT that looks like this:

    methodtypes-of:A:
     2 m1(n : Number) -> Number
     2 m2(n : Number) -> Done
     |
     B<T>
     &
     other.C
     2

...means that type A is a variant type of B<T> | (other.C & 2), where 2 is a type
literal that contains two methods (m1 and m2).
